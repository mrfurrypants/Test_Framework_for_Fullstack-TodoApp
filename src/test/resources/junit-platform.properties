junit.jupiter.testinstance.lifecycle.default = per_method
# "per_method" (default):
# - @BeforeAll is STATIC
# - JUnit creates a new instance of the test class for each test method execution,
# - if changes were made to the test class instance during one test method execution,
# - they will not affect the state of the test instance for other test methods.

# "per_class":
# - @BeforeAll is non-STATIC
# - each test should remain independent and isolated from other tests!
# - even if test methods modify the instance state,
# - it's needed to reset it explicitly, using @BeforeEach or @AfterEach methods.

junit.jupiter.execution.timeout.mode = enabled
# Test execution timeouts are:
# "enabled" (default) - (@Timeout is disabled globally) if any test method exceeds the specified timeout period,
# the test (annotated as @RepeatedTest, @ParameterizedTest or @Test+@Timeout) will fail.
# "disabled" (manually)
junit.jupiter.execution.timeout.default = 60 s
# unit of time in miliseconds

junit.jupiter.testclass.order.default = org.junit.jupiter.api.ClassOrderer$OrderAnnotation
# is used to specify the default class ordering strategy for test classes

junit.jupiter.execution.parallel.enabled = false
# "false" (default)
# "true" (manually) - parallel test execution is enabled
junit.jupiter.execution.parallel.mode.classes.default = none
# Property to specify the default parallel execution mode for different test classes:
# "concurrent" - for each test class = each separate thread
# "none" - test classes are executed sequentially (with resource limitations)
junit.jupiter.execution.parallel.mode.default = same_thread
# Property to specify the default parallel execution mode for test methods within the same test class:
# "concurrent" - for each test method = each separate thread
# "same_thread" (default) - test methods within the same test class are executed sequentially in the same thread (whereas test classes are executed sequentially "none" or concurrently "concurrent")